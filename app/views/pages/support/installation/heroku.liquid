{% extends 'parent' %}

{% block page_inner %}

<p>
  That is probably the most useful feature in Locomotive. The installation on Heroku is pretty simple and it only requires a <a href="https://api.heroku.com/signup">Heroku</a> (free) / <a href="">Amazon S3</a> (inexpensive) account.
  <br/>
  Heroku supports ruby 1.9.2.p0. Please visit this <a href="http://docs.heroku.com/stack">page</a> to learn more about it.
</p>

<p class="step"><em>1.</em> Initialize a Locomotive application (choose one of the 2 installation ways above, either from source or gem).</p>

<p class="step"><em>2.</em> Create the heroku app from your app folder</p>
<pre class="shell"><code class="shell">git init .<br/>heroku create my-app-name</code></pre>
<p>Note: if you installed it from the <b>source</b>, you should read this <a href="http://docs.heroku.com/git">page</a> before. One more thing, do not forget to run:</p>
<pre class="shell"><code class="shell">heroku config:add BUNDLE_WITHOUT=development:test</code></pre>

<p class="step"><em>3.</em> Set up a remote Mongodb database. You can find more information <a href="http://docs.heroku.com/mongohq">here</a></p>
<pre class="shell"><code class="shell">heroku addons:add mongohq:free</code></pre>
<p>Modify the configuration for the production mongodb database in the <b>config/mongoid.yml</b> file.</p>
<pre class="shell"><code class="ruby">production:
    uri: &lt;%= ENV['MONGOHQ_URL'] %&gt;</code></pre>

<p class="step"><em>4.</em> Locomotive needs to send emails and Heroku provides a nice way to send emails for free without configuring a whole mail server on your own. You can find more information <a href="http://docs.heroku.com/sendgrid">here</a></p>
<pre class="shell"><code class="shell">heroku addons:add sendgrid:starter</code></pre>
<p>Add the following lines in your <b>config/production.rb</b> file.
  <pre class="shell"><code class="ruby">ActionMailer::Base.smtp_settings = {
    :address        => "smtp.sendgrid.net",
    :port           => "25",
    :authentication => :plain,
    :user_name      => ENV['SENDGRID_USERNAME'],
    :password       => ENV['SENDGRID_PASSWORD'],
    :domain         => ENV['SENDGRID_DOMAIN']
  }</code></pre>
  
  <p class="step"><em>5.</em> Configure Heroku to work with your Amazon S3 credentials <br/><br/>
  (5.1) First, store your S3 credentials in your locals var (you might use it again next step):
  </p>
  
  <pre class="shell"><code class="shell">export S3_KEY_ID=&lt;your s3 key id&gt;<br/>export S3_SECRET_KEY=&lt;your s3 secret key&gt;<br/>export S3_BUCKET=&lt;your s3 bucket name&gt;</code></pre>
  <p>You can check typing 'echo $S3_KEY_ID'.<br/> (5.2) Then, push these credentials to Heroku :</p>
  <pre class="shell"><code class="shell">heroku config:add S3_KEY_ID=$S3_KEY_ID<br/>heroku config:add S3_SECRET_KEY=$S3_SECRET_KEY<br/>heroku config:add S3_BUCKET=$S3_BUCKET</code></pre>
  
  <p class="step"><em>6.</em> Generate the assets ( and push them to S3 )<br/>
    As long as Heroku file system <a href="http://devcenter.heroku.com/articles/read-only-filesystem">is read-only limited</a>, pushing assets to AWS S3 is required for inline customisation feature. Furthermore, S3 will enhance your locomotivecms performances with <a href="https://github.com/railsjedi/jammit-s3">Jammit-S3</a>.</p>
  
  <pre class="shell"><code class="shell">jammit-s3 --force</code></pre>
  <p>Notice that this command use your S3 credentials exported in 5.1</p>
  <p>If you do not want to push the assets in S3 but leave them in your application instead, remove the lines about S3 in the <b>config/assets.yml</b> file and run the following command</p>
  <pre class="shell"><code class="shell">jammit --force</code></pre>
  
  <p class="step"><em>7.</em> Edit your Locomotive config file.</p>
  <pre class="shell"><code class="shell">mate config/initializers/locomotive.rb</code></pre>
  <p>Uncomment the following line and replace your Heroku id and password</p>
  <pre class="shell"><code class="ruby">config.heroku = { :login => '&lt;my heroku login&gt;', :password => '&lt;my heroku password&gt;' }</code></pre>
  
  <p><b>Note:</b> the following configuration is in the case you host a single website. If you want to use Locomotive as a multi-sites platform, you have to uncomment the lines relative to the multi-sites option and set your main domain name (ex: mycmsplatform.com). Also, do not forget to enable the wildcard domains option in Heroku ($5/mo): <a href="http://docs.heroku.com/custom-domains">http://docs.heroku.com/custom-domains</a>.
    
    <p class="step"><em>8.</em> Configure DelayedJob <b><span class="caps">(OPTIONAL)</span></b>. Locomotive needs DJ for the theme import module in order to avoid the application to slow down when an user uploads a new theme. If you do not have a lot of traffic, we suggest you to disable DJ (disabled by default actually). Anyway, if you do want it, apply the following instructions.</p>
    <pre class="shell"><code class="shell">mate Gemfile</code></pre>
    <p>Add the lines</p>
    <pre class="shell"><code class="ruby">gem 'dalli'<br/></code></pre>
    <pre class="shell"><code class="shell">mate config/environments/production.rb</code></pre>
    <pre class="shell"><code class="ruby">config.cache_store = :dalli_store</code></pre>
    
    <p class="step"><em>9.</em> Launch it !</p>
    <pre class="shell"><code class="shell">git add .<br/>git commit -am "launch it"<br/>git push heroku master</code></pre>
    
    <p>Then, visit your application</p>
    <pre class="shell"><code class="shell">heroku open</code></pre>
    
    <p>Follow the instructions.</p>
    
    {% endblock %}
    